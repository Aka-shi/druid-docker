#
# Licensed to Metamarkets Group Inc. (Metamarkets) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. Metamarkets licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Extensions
#
druid.extensions.directory=/opt/druid/extensions
druid.extensions.loadList=["druid-kafka-eight", "druid-kafka-indexing-service", "druid-s3-extensions", "druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage"]

#
# Logging
#
# Log all runtime properties on startup
druid.startup.logging.logProperties=true

#
# Zookeeper
#
druid.zk.service.host=${ZOOKEEPER_HOST}
druid.zk.paths.base=/druid

#
# Metadata storage
#
druid.metadata.storage.type=postgresql
druid.metadata.storage.connector.connectURI=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DBNAME}
druid.metadata.storage.connector.user=${POSTGRES_USERNAME}
druid.metadata.storage.connector.password=${POSTGRES_PASSWORD}

#
# S3
#
# druid.s3.accessKey=${S3_ACCESS_KEY}
# druid.s3.secretKey=${S3_SECRET_KEY}

#
# Deep storage
#
# For local disk (only viable in a cluster if this is a network mount):
druid.storage.type=local
druid.storage.storageDirectory=/data/druid/segments
# druid.storage.type=s3
# druid.storage.bucket=${S3_STORAGE_BUCKET}
# druid.storage.baseKey=druid/segments

#
# Indexing service logs
#
# druid.indexer.logs.type=s3
# druid.indexer.logs.s3Bucket=${S3_INDEXING_BUCKET}
# druid.indexer.logs.s3Prefix=druid/indexing-logs

#
# Service discovery
#
druid.selectors.indexing.serviceName=druid/overlord
druid.selectors.coordinator.serviceName=druid/coordinator

#
# Monitoring
#
druid.monitoring.monitors=["com.metamx.metrics.JvmMonitor"]
druid.emitter=logging
druid.emitter.logging.logLevel=info
